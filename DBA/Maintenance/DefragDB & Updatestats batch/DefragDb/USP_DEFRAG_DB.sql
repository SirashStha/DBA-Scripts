CREATE OR ALTER PROCEDURE [dbo].[USP_DEFRAG_DB_UPDATED]
AS
BEGIN TRY 

	SET NOCOUNT ON;
	DECLARE @CMD NVARCHAR(1000);
	DECLARE @TABLE VARCHAR(255); 
	DECLARE @SCHEMANAME VARCHAR(255);
	DECLARE @INDEXNAME VARCHAR(255);
	DECLARE @INDEXTYPE VARCHAR(255);
	DECLARE @AVGFRAGMENTATIONINPERCENT DECIMAL(18,4)=0;
	DECLARE @FRAGMENTATIONTHRESHOLDFORREORGANIZETABLELOWERLIMIT DECIMAL(18,4)=5;
	DECLARE @FRAGMENTATIONTHRESHOLDFORREBUILDTABLELOWERLIMIT DECIMAL(18,4)=30;
	DECLARE @MESSAGE VARCHAR(MAX);
	DECLARE @FILLFACTOR VARCHAR(5);
	DECLARE @PAGECOUNT INT;

	SET @PAGECOUNT = 100

	IF (SELECT OBJECT_ID('TEMPDB..#FRAMENTEDTABLELIST')) IS NOT NULL
		BEGIN
			DROP TABLE #FRAMENTEDTABLELIST; 
		END

	SET @MESSAGE = 'DATE : ' + CONVERT(VARCHAR, GETDATE()) + ' - RETRIEVING INDEXES WITH HIGH FRAGMENTATION FROM ' + DB_NAME() + ' DATABASE.'
	RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT 

	SELECT
		T.[TABLENAME],
		T.AVG_FRAGMENTATION_IN_PERCENT, 
		T.[INDEXNAME],  
		T.[SCHEMANAME],
		T.ISPROCESSED,
		T.[INDEX_TYPE],
		(CASE WHEN ISNULL(T.[FILLFACTOR],0)=0 THEN 90 ELSE T.[FILLFACTOR] END) [FILLFACTOR]
		, T.[PAGE_COUNT]
	INTO #FRAMENTEDTABLELIST
	FROM (
		SELECT 
			OBJECT_NAME(IPS.OBJECT_ID) AS [TABLENAME], AVG_FRAGMENTATION_IN_PERCENT, SI.[NAME] [INDEXNAME],  
			SCHEMA_NAME(ST.SCHEMA_ID) AS [SCHEMANAME], 0 AS ISPROCESSED,SI.[TYPE] [INDEX_TYPE],SI.FILL_FACTOR [FILLFACTOR], IPS.page_count
		FROM SYS.DM_DB_INDEX_PHYSICAL_STATS(DB_ID(), NULL, NULL, NULL , 'LIMITED') IPS 
			JOIN SYS.TABLES ST WITH (NOLOCK) ON IPS.OBJECT_ID = ST.OBJECT_ID 
			JOIN SYS.INDEXES SI WITH (NOLOCK) ON IPS.OBJECT_ID = SI.OBJECT_ID AND IPS.INDEX_ID = SI.INDEX_ID 
		WHERE ST.IS_MS_SHIPPED = 0 AND SI.[NAME] IS NOT NULL AND SI.[TYPE] IN (1,2)
		UNION ALL
		SELECT 
			OBJECT_NAME(IPS.OBJECT_ID) AS [TABLENAME], SUM(ISNULL(AVG_FRAGMENTATION_IN_PERCENT,0))AVG_FRAGMENTATION_IN_PERCENT, ISNULL(SI.NAME,'NONAME_INDEX') [INDEXNAME],  
			SCHEMA_NAME(ST.SCHEMA_ID) AS [SCHEMANAME], 0 AS ISPROCESSED,SI.[TYPE] [INDEX_TYPE],SI.FILL_FACTOR [FILLFACTOR], IPS.page_count
		FROM SYS.DM_DB_INDEX_PHYSICAL_STATS(DB_ID(), NULL, NULL, NULL , 'LIMITED') IPS 
			JOIN SYS.TABLES ST WITH (NOLOCK) ON IPS.OBJECT_ID = ST.OBJECT_ID 
			JOIN SYS.INDEXES SI WITH (NOLOCK) ON IPS.OBJECT_ID = SI.OBJECT_ID AND IPS.INDEX_ID = SI.INDEX_ID 
		WHERE ST.IS_MS_SHIPPED = 0 AND SI.[name] IS NOT NULL AND SI.[TYPE]=5
		GROUP BY IPS.OBJECT_ID,SI.[NAME],ST.[SCHEMA_ID],SI.[TYPE],SI.FILL_FACTOR, IPS.page_count
	)T 
	WHERE T.AVG_FRAGMENTATION_IN_PERCENT>=@FRAGMENTATIONTHRESHOLDFORREORGANIZETABLELOWERLIMIT AND T.page_count > @PAGECOUNT
	ORDER BY T.INDEXNAME ASC,(CASE WHEN T.INDEX_TYPE=5 THEN 1 ELSE T.INDEX_TYPE END) ASC;

		--0 = Heap
		--1 = Clustered
		--2 = Nonclustered
		--3 = XML
		--4 = Spatial
		--5 = Clustered columnstore index. Applies to: SQL Server 2014 (12.x) through SQL Server 2017.
		--6 = Nonclustered columnstore index. Applies to: SQL Server 2012 (11.x) through SQL Server 2017.
		--7 = Nonclustered hash index. Applies to: SQL Server 2014 (12.x) through SQL Server 2017.

	SET @MESSAGE = 'DATE : ' + CONVERT(VARCHAR, GETDATE()) + ' - RETRIEVED INDEXES WITH HIGH FRAGMENTATION FROM ' + DB_NAME() + ' DATABASE.';
	RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT;
	RAISERROR('', 0, 1) WITH NOWAIT;

	--SELECT * FROM #FRAMENTEDTABLELIST RETURN

	WHILE EXISTS (SELECT 1 FROM #FRAMENTEDTABLELIST WHERE ISPROCESSED = 0 )
	BEGIN 
		SELECT TOP 1 
			@TABLE=TABLENAME,
			@AVGFRAGMENTATIONINPERCENT=AVG_FRAGMENTATION_IN_PERCENT,
			@SCHEMANAME=SCHEMANAME,
			@INDEXNAME=INDEXNAME,
			@INDEXTYPE=INDEX_TYPE,
			@FILLFACTOR=[FILLFACTOR]
		FROM #FRAMENTEDTABLELIST WHERE ISPROCESSED = 0;

		--REORGANIZING THE INDEX 
		IF((@AVGFRAGMENTATIONINPERCENT >= @FRAGMENTATIONTHRESHOLDFORREORGANIZETABLELOWERLIMIT) AND (@AVGFRAGMENTATIONINPERCENT < @FRAGMENTATIONTHRESHOLDFORREBUILDTABLELOWERLIMIT))
			BEGIN 
				SET @MESSAGE = 'DATE : ' + CONVERT(VARCHAR, GETDATE()) + ' - REORGANIZING INDEX FOR [' + @TABLE + '] WHICH HAS AVG_FRAGMENTATION_IN_PERCENT = ' + CONVERT(VARCHAR, @AVGFRAGMENTATIONINPERCENT) + '.';
				RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT;
				
				IF @INDEXTYPE IN (1,2)
					BEGIN
						SET @CMD = 'ALTER INDEX ' + @INDEXNAME + ' ON [' + RTRIM(LTRIM(@SCHEMANAME)) + '].[' + RTRIM(LTRIM(@TABLE)) + '] REORGANIZE';
						EXEC (@CMD);
						SET @MESSAGE = 'DATE : ' + CONVERT(VARCHAR, GETDATE()) + ' - REORGANIZE INDEX COMPLETED SUCCESSFULLY FOR [' + @TABLE + '].';
						RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT;
						RAISERROR('', 0, 1) WITH NOWAIT;
					END
				--ELSE IF @INDEXTYPE=5
				--	BEGIN
				--		SET @CMD = 'ALTER INDEX ' + @INDEXNAME + ' ON [' + RTRIM(LTRIM(@SCHEMANAME)) + '].[' + RTRIM(LTRIM(@TABLE)) + '] REORGANIZE WITH ( LOB_COMPACTION = ON, COMPRESS_ALL_ROW_GROUPS = ON )';
				--		EXEC (@CMD);
				--		SET @MESSAGE = 'DATE : ' + CONVERT(VARCHAR, GETDATE()) + ' - REORGANIZE COLUMNSTORE INDEX COMPLETED SUCCESSFULLY FOR [' + @TABLE + '].';
				--		RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT;
				--		RAISERROR('', 0, 1) WITH NOWAIT;
				--	END

			END 
		--REBUILDING THE INDEX 
		ELSE IF (@AVGFRAGMENTATIONINPERCENT >= @FRAGMENTATIONTHRESHOLDFORREBUILDTABLELOWERLIMIT ) 
			BEGIN 
				SET @MESSAGE = 'DATE : ' + CONVERT(VARCHAR, GETDATE()) + ' - REBUILDING INDEX FOR [' + @TABLE + '] WHICH HAS AVG_FRAGMENTATION_IN_PERCENT = ' + CONVERT(VARCHAR, @AVGFRAGMENTATIONINPERCENT) + '.';
				RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT;

				IF @INDEXTYPE IN (1,2) --ROWSTORE CLUSTER & NONCLUSTER
					BEGIN
						SET @CMD = 'ALTER INDEX ' + @INDEXNAME + ' ON [' + RTRIM(LTRIM(@SCHEMANAME)) + '].[' + RTRIM(LTRIM(@TABLE)) + '] REBUILD WITH (FILLFACTOR = ' + CONVERT(VARCHAR(3),@FILLFACTOR) + ', STATISTICS_NORECOMPUTE = OFF), SORT_IN_TEMPDB = ON';
						EXEC (@CMD);
						SET @MESSAGE = 'DATE : ' + CONVERT(VARCHAR, GETDATE()) + ' - REBUILD INDEX COMPLETED SUCCESSFULLY FOR [' + @TABLE + '].';
						RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT;
						RAISERROR('', 0, 1) WITH NOWAIT;
					END
				--ELSE IF @INDEXTYPE IN (5,6) --COLUMSTORE CLUSTER & NONCLUSTER
				--	BEGIN
				--		SET @CMD = 'ALTER INDEX ' + @INDEXNAME + ' ON [' + RTRIM(LTRIM(@SCHEMANAME)) + '].[' + RTRIM(LTRIM(@TABLE)) + '] REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = COLUMNSTORE)';
				--		EXEC (@CMD);
				--		SET @MESSAGE = 'DATE : ' + CONVERT(VARCHAR, GETDATE()) + ' - REBUILD COLUMSTORE INDEX COMPLETED SUCCESSFULLY FOR [' + @TABLE + '].';
				--		RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT;
				--		RAISERROR('', 0, 1) WITH NOWAIT;
				--	END
			END 
		UPDATE #FRAMENTEDTABLELIST SET ISPROCESSED = 1 WHERE TABLENAME = @TABLE AND INDEXNAME = @INDEXNAME;
	END
	SET @MESSAGE = 'UPDATING STATISTICS...';
	RAISERROR(@MESSAGE, 0, 1) WITH NOWAIT;
	EXEC sp_updatestats;
	DROP TABLE #FRAMENTEDTABLELIST;
END TRY 
BEGIN CATCH
	DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
	DECLARE @ErrorState INT = ERROR_STATE();
	DECLARE @ErrorMessage VARCHAR(MAX);
	SET @ErrorMessage=ERROR_MESSAGE();
	RAISERROR (@ErrorMessage,@ErrorSeverity,@ErrorState);
END CATCH

GO

EXEC [USP_DEFRAG_DB]