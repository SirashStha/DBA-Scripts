
ALTER   PROCEDURE [dbo].[USP_NESTED_CHECK_GLOBAL_APPROVAL_RIGHTS]
(
	@IS_CREATE BIT,
	@TRAN_DATE DATE,
	@CREATION_BR_CODE VARCHAR(50),
	@MENU_CODE INT,
	-- FOR APPROVAL PROCESS ONLY
	@TRANSACTION_APPROVAL_FLOW_LOG_MAST_ID INT = 0,
	@APPROVAL_USER_ID VARCHAR(50),
	@APPROVAL_BR_CODE VARCHAR(50),
	@ACTION_OPTION INT = 0, -- 1 - OPEN, 2 - EDIT, 3 - DELETE, 4 - PRINT
	@MAX_APPROVAL_LEVEL INT = 0 OUTPUT, -- FOR APPROVAL
	@HAS_APPROVAL_RIGHTS BIT = 0 OUTPUT, -- FOR CREATE
	@TXN_LIST AS TYPE_GL_TXN READONLY  -- OPTIONAL. Required for dr/cr transactions only
)
AS
BEGIN
	SET NOCOUNT ON;
	SET ARITHABORT ON;

	DROP TABLE IF EXISTS #USER_GROUPS
	DROP TABLE IF EXISTS #ALL_SCREEN_RIGHTS
	DROP TABLE IF EXISTS #VALID_RIGHTS
	DROP TABLE IF EXISTS #GL_LIST
	DROP TABLE IF EXISTS #AC_GROUP
	DROP TABLE IF EXISTS #AC_GROUP_RIGHTS
	DROP TABLE IF EXISTS #FLOW_AC_DETL
	DROP TABLE IF EXISTS #VALID_LIMIT

	-- GET GLOBAL SETUP FIELDS
    DECLARE @IS_ADMIN_USER_ALLOWED_FULL_RIGHTS BIT = (SELECT TOP 1 IS_ADMIN_USER_ALLOWED_FULL_RIGHTS FROM GLOBAL_SETUP);
	DECLARE @IS_USER_ADMIN BIT = (SELECT TOP 1 (CASE WHEN [ADMIN] = 'YES' THEN 1 ELSE 0 END) FROM USERS WHERE [USER_ID] = @APPROVAL_USER_ID);

	--Menu Auth Option: 1.Screen-based, 2.A/c Group-based, 3. A/c Group Limit-based
	DECLARE @MSG VARCHAR(4000);
	DECLARE @MENU_AUTH_TYPE INT = (SELECT TOP 1 MENU_AUTH_OPTION FROM APP_MENU WHERE MENU_CODE = @MENU_CODE)
	IF @MENU_AUTH_TYPE NOT IN (1,2,3)
		THROW 90001, 'Error ! - Menu authorization type is invalid !', 1;
	

	SELECT A.BR_CODE, A.USER_GROUP_CODE, A.USER_RIGHTS_HIST_ID
	INTO #USER_GROUPS
	FROM [dbo].[GET_ASSIGNED_USER_GROUPS](@APPROVAL_USER_ID) A

	DECLARE @APPROVAL_LEVEL INT = 0;
	IF NOT EXISTS (SELECT TOP 1 1 FROM TRANSACTION_APPROVAL_FLOW_LOG_DETL WHERE TRANSACTION_APPROVAL_FLOW_LOG_MAST_ID = @TRANSACTION_APPROVAL_FLOW_LOG_MAST_ID AND ACTION_OPTION = 3)
		SET @APPROVAL_LEVEL = 1;
	ELSE
		SET @APPROVAL_LEVEL = (SELECT COUNT(1) FROM TRANSACTION_APPROVAL_FLOW_LOG_DETL WHERE TRANSACTION_APPROVAL_FLOW_LOG_MAST_ID = @TRANSACTION_APPROVAL_FLOW_LOG_MAST_ID AND ACTION_OPTION = 3) + 1;

	IF @MENU_AUTH_TYPE = 1
	BEGIN
		SELECT MAST.CREATOR_BRANCH_CATEGORY_CODE, MAST.EFFECT_DATE, MENU.MENU_CODE
			, DETL_RIGHTS.ACTION_OPTION, DETL_RIGHTS.APPROVAL_LEVEL, DETL_RIGHTS.APPROVAL_ROLE
			, DETL_RIGHTS.APPROVAL_BRANCH_CATEGORY_CODE
		INTO #ALL_SCREEN_RIGHTS
		FROM SCREEN_ACTION_APPROVAL_FLOW_SETUP_MAST MAST
			INNER JOIN SCREEN_ACTION_APPROVAL_FLOW_SETUP_DETL MENU ON MAST.TRAN_ID = MENU.SCREEN_ACTION_APPROVAL_FLOW_SETUP_MAST_ID
			INNER JOIN SCREEN_ACTION_APPROVAL_FLOW_SETUP_DETL1 DETL_RIGHTS ON MAST.TRAN_ID = DETL_RIGHTS.SCREEN_ACTION_APPROVAL_FLOW_SETUP_MAST_ID
			INNER JOIN BRANCH CREATE_BR ON CREATE_BR.BR_CODE = @CREATION_BR_CODE AND CREATE_BR.BR_CAT_CODE = MAST.CREATOR_BRANCH_CATEGORY_CODE
		WHERE MAST.[STATUS] = 1 AND MENU.MENU_CODE = @MENU_CODE
			AND MAST.EFFECT_DATE <= @TRAN_DATE

		IF NOT EXISTS (SELECT TOP 1 1 FROM #ALL_SCREEN_RIGHTS) AND (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 0 OR (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 0))
			THROW 90001, 'Warning - ! Screen approval rights is not setup...!!!', 1;

		DECLARE @INVALID_USER_GROUPS VARCHAR(3900) = (
			SELECT STRING_AGG('Level ' + cast(APPROVAL_LEVEL as varchar(MAX)) + ': '+ dbo.ProperCase(cast(UG.USER_GROUP_NAME as varchar(MAX))) + ' (' + UG.USER_GROUP_CODE + ')', ' , ')
			from (
				select distinct vl.APPROVAL_LEVEL, user_group_name, UG.USER_GROUP_CODE
				FROM #ALL_SCREEN_RIGHTS VL
				INNER JOIN USER_GROUP UG ON VL.APPROVAL_ROLE = UG.USER_GROUP_CODE
				LEFT OUTER JOIN (
					SELECT ROW_NUMBER() OVER(PARTITION BY USER_GROUP_CODE ORDER BY TRAN_ID DESC) RN, USER_GROUP_CODE
					FROM USER_RIGHTS_HIST
					WHERE [ACTION] = 1
				) RIGHTS ON VL.APPROVAL_ROLE = RIGHTS.USER_GROUP_CODE AND RIGHTS.RN = 1
			WHERE RIGHTS.RN IS NULL
			) ug
		);
		IF @INVALID_USER_GROUPS IS NOT NULL AND (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 0 OR (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 0))
		BEGIN
			SET @MSG = FORMATMESSAGE('Warning - ! Approval Users are not assigned with proper approval rights in the following roles - %s', @INVALID_USER_GROUPS);
			;THROW 50000, @msg, 1;
		END

		IF @IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 1
			SET @MAX_APPROVAL_LEVEL = 1;
        ELSE
            SET @MAX_APPROVAL_LEVEL = ISNULL((SELECT MAX(APPROVAL_LEVEL) FROM #ALL_SCREEN_RIGHTS), 0);
		DROP TABLE IF EXISTS #TEMP_ACTION_OPTION;
		/*
		* 1 - Open
		* 2 - Edit
		* 3 - Delete
		* 5 - Print
		*/
		CREATE TABLE #TEMP_ACTION_OPTION(ACTION_OPTION INT)
		IF @ACTION_OPTION = 0
			INSERT INTO #TEMP_ACTION_OPTION(ACTION_OPTION) VALUES (1), (2), (3), (5)
		ELSE
			INSERT INTO #TEMP_ACTION_OPTION(ACTION_OPTION) VALUES (@ACTION_OPTION)

		--SET @MAX_APPROVAL_LEVEL = ISNULL((SELECT MAX(APPROVAL_LEVEL) FROM #ALL_SCREEN_RIGHTS), 0);

		SELECT RIG.* 
		INTO #VALID_RIGHTS
		FROM #ALL_SCREEN_RIGHTS RIG
			INNER JOIN BRANCH CREATE_BR ON CREATE_BR.BR_CODE = @CREATION_BR_CODE AND CREATE_BR.BR_CAT_CODE = RIG.CREATOR_BRANCH_CATEGORY_CODE
			INNER JOIN BRANCH ON BRANCH.BR_CODE = @APPROVAL_BR_CODE AND RIG.APPROVAL_BRANCH_CATEGORY_CODE = BRANCH.BR_CAT_CODE AND @APPROVAL_BR_CODE IN (SELECT [VALUE] FROM STRING_SPLIT(CREATE_BR.BR_LEVEL, '.'))
			INNER JOIN #USER_GROUPS UG ON UG.USER_GROUP_CODE = RIG.APPROVAL_ROLE
		WHERE APPROVAL_LEVEL = @APPROVAL_LEVEL AND RIG.ACTION_OPTION IN (SELECT * FROM #TEMP_ACTION_OPTION)

		IF @IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 1
            SET @HAS_APPROVAL_RIGHTS = 1;
        ELSE
            SET @HAS_APPROVAL_RIGHTS = CASE WHEN EXISTS (SELECT TOP 1 1 FROM #VALID_RIGHTS) THEN 1 ELSE 0 END;

		IF @IS_CREATE = 0 AND @HAS_APPROVAL_RIGHTS = 0 -- FOR APPROVAL
			THROW 50000, 'Warning - ! User doesn''t have approval rights...!!!', 1;
	END
	ELSE IF @MENU_AUTH_TYPE IN (2,3) -- later convert to 3 only 
	BEGIN
		IF NOT EXISTS (SELECT TOP 1 1 FROM @TXN_LIST)
			THROW 90001, 'Warning ! - Transaction list for global approval rights check is not supplied !', 1;

		;WITH GL AS (
			SELECT GL.GL_CODE, SUM(GL.AMOUNT) AMOUNT
			FROM @TXN_LIST GL
			GROUP BY GL.GL_CODE
		)
		SELECT GL.AMOUNT AMOUNT, AC.AC_GROUP_CODE, GL.GL_CODE
		INTO #GL_LIST
		FROM GL
			INNER JOIN AC_CHART AC ON GL.GL_CODE = AC.GL_CODE

		SELECT SUM(GL.AMOUNT) AMOUNT, GL.AC_GROUP_CODE
		INTO #AC_GROUP
		FROM #GL_LIST GL
		GROUP BY GL.AC_GROUP_CODE

		IF @IS_CREATE = 1
		BEGIN
			SELECT DISTINCT T.AC_GROUP_CODE
			INTO #AC_GROUP_RIGHTS
			FROM 
				(
					SELECT RIGHTS_OPT_7 RIGHTS_OPT
						, ROW_NUMBER() OVER(PARTITION BY UGAGR.USER_GROUP_CODE,UGAGR.AC_GROUP_CODE ORDER BY UGAGR.EFFECT_DATE DESC,UGAGR.TRAN_ID DESC) RN 
						, UGAGR.AC_GROUP_CODE
					FROM USER_GROUP_AC_GROUP_RIGHTS UGAGR
						INNER JOIN #USER_GROUPS URH ON URH.USER_GROUP_CODE=UGAGR.USER_GROUP_CODE
						INNER JOIN #AC_GROUP AG ON AG.AC_GROUP_CODE = UGAGR.AC_GROUP_CODE
					WHERE EFFECT_DATE<=@TRAN_DATE
				) AS T WHERE T.RN=1 AND T.RIGHTS_OPT=1

			DECLARE @INVALID_AC_GROUP_RIGHTS VARCHAR(3900) = (
				SELECT STRING_AGG(dbo.ProperCase(cast( AC_GROUP.AC_GROUP_NAME as varchar(max))) + ' (' + cast(AG.AC_GROUP_CODE as varchar(max)) + ')', ', ')
				FROM #AC_GROUP AG
					INNER JOIN AC_GROUP ON AC_GROUP.AC_GROUP_CODE = AG.AC_GROUP_CODE
					LEFT OUTER JOIN #AC_GROUP_RIGHTS AD ON AG.AC_GROUP_CODE = AD.AC_GROUP_CODE
				WHERE AD.AC_GROUP_CODE IS NULL
			);
			IF @INVALID_AC_GROUP_RIGHTS IS NOT NULL AND (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 0 OR (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 0))
			BEGIN
				SET @MSG = FORMATMESSAGE('Warning ! - Transaction rights not assigned to the user in the following A/C Group - %s', @INVALID_AC_GROUP_RIGHTS);
				;THROW 50000, @msg, 1;
			END
		END
		/* CREATION BRANCH AND AC GROUP FILTER */
		SELECT DETL.AC_GROUP_CODE, DETL.TRAN_ID, DETL.AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_MAST_ID
		INTO #FLOW_AC_DETL
		FROM AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_MAST MAST
			INNER JOIN AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_DETL1 DETL ON DETL.AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_MAST_ID = MAST.TRAN_ID
			INNER JOIN #AC_GROUP AG ON DETL.AC_GROUP_CODE = AG.AC_GROUP_CODE --FILTER
			INNER JOIN BRANCH BR ON BR.BR_CODE = @CREATION_BR_CODE AND MAST.CREATOR_BRANCH_CATEGORY_CODE = BR.BR_CAT_CODE
		WHERE MAST.[STATUS] = 1 AND MAST.EFFECT_DATE <= @TRAN_DATE

		DECLARE @INVALID_AC_GROUPS VARCHAR(3900) = (
			SELECT STRING_AGG(dbo.ProperCase(cast(AC_GROUP.AC_GROUP_NAME as varchar(max))) + ' (' + cast(AG.AC_GROUP_CODE as varchar(max)) + ')', ' ,')
			FROM #AC_GROUP AG
				INNER JOIN AC_GROUP ON AC_GROUP.AC_GROUP_CODE = AG.AC_GROUP_CODE
				LEFT OUTER JOIN #FLOW_AC_DETL AD ON AG.AC_GROUP_CODE = AD.AC_GROUP_CODE
			WHERE AD.AC_GROUP_CODE IS NULL
		);

		IF @INVALID_AC_GROUPS IS NOT NULL AND (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 0 OR (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 0))
		BEGIN
			SET @MSG = FORMATMESSAGE('Warning ! - Approval Flow not set for the following Account Group - %s', @INVALID_AC_GROUPS);
			;THROW 50000, @msg, 1;
		END
	
		/* LIMIT FILTER */
		IF  OBJECT_ID('tempdb..#ALL_LIMIT') IS NULL
		BEGIN
			CREATE TABLE #ALL_LIMIT(AC_GROUP_CODE VARCHAR(50), LIMIT_ORDER INT, UP_TO_CR_TRAN_LIMIT DECIMAL(18,2), UP_TO_DR_TRAN_LIMIT DECIMAL(18,2), UP_TO_LOAN_LIMIT DECIMAL(18,2), AMOUNT DECIMAL(18,2), APPROVAL_LEVEL INT, USER_ROLE VARCHAR(50), APPROVAL_BRANCH_CATEGORY_CODE VARCHAR(50))
		END

		INSERT INTO #ALL_LIMIT(AC_GROUP_CODE, LIMIT_ORDER, UP_TO_CR_TRAN_LIMIT, UP_TO_DR_TRAN_LIMIT, UP_TO_LOAN_LIMIT, AMOUNT, APPROVAL_LEVEL, USER_ROLE, APPROVAL_BRANCH_CATEGORY_CODE)
		SELECT DETL.AC_GROUP_CODE
			, DENSE_RANK() OVER(PARTITION BY DETL.AC_GROUP_CODE, DETL2.USER_ROLE ORDER BY CASE 
						WHEN AG.AMOUNT > 0 THEN UP_TO_CR_TRAN_LIMIT ELSE UP_TO_DR_TRAN_LIMIT END) LIMIT_ORDER
			, DETL1.UP_TO_CR_TRAN_LIMIT, DETL1.UP_TO_DR_TRAN_LIMIT, DETL1.UP_TO_LOAN_LIMIT
			, AG.AMOUNT
			, DETL2.APPROVAL_LEVEL, DETL2.USER_ROLE, DETL2.APPROVAL_BRANCH_CATEGORY_CODE
		FROM #FLOW_AC_DETL DETL
			INNER JOIN AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_DETL2 DETL1 ON DETL1.AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_MAST_ID = DETL.AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_MAST_ID
			INNER JOIN AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_DETL3 DETL2 ON DETL2.AC_GROUP_DR_CR_LIMIT_APPROVAL_FLOW_SETUP_DETL2_ID = DETL1.TRAN_ID
			INNER JOIN #AC_GROUP AG ON AG.AC_GROUP_CODE = DETL.AC_GROUP_CODE 
				AND 1 = CASE 
					WHEN AG.AMOUNT > 0 
						THEN 
							CASE WHEN DETL1.UP_TO_CR_TRAN_LIMIT >= AG.AMOUNT THEN 1 ELSE 0 END 
						ELSE CASE WHEN DETL1.UP_TO_DR_TRAN_LIMIT >= ABS(AG.AMOUNT) THEN 1 ELSE 0 END
					END
		
		DECLARE @INVALID_LIMIT_AC_GROUPS VARCHAR(3900) = (
			SELECT STRING_AGG(dbo.ProperCase(CAST(AC.AC_GROUP_CODE AS  VARCHAR(MAX))) + ' (' + CAST(AG.AC_GROUP_NAME AS  VARCHAR(MAX)) + ')', ' ,')
			FROM (
				SELECT AC.AC_GROUP_CODE
				FROM @TXN_LIST GL
				INNER JOIN AC_CHART AC ON GL.GL_CODE = AC.GL_CODE
				LEFT OUTER JOIN #ALL_LIMIT LIM ON AC.AC_GROUP_CODE = LIM.AC_GROUP_CODE
			WHERE LIM.AC_GROUP_CODE IS NULL
			) AC
			INNER JOIN AC_GROUP AG ON AG.AC_GROUP_CODE = AC.AC_GROUP_CODE
		);
		IF @INVALID_LIMIT_AC_GROUPS IS NOT NULL AND (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 0 OR (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 0))
		BEGIN
			SET @MSG = FORMATMESSAGE('Warning ! - DR/CR Limit Approval Rights (Insufficient Limit) not assigned for the users in the following Account Groups: - %s', @INVALID_LIMIT_AC_GROUPS);
			;THROW 50000, @msg, 1;
		END

		SET @INVALID_USER_GROUPS = (
			SELECT STRING_AGG('Level ' + cast(APPROVAL_LEVEL as varchar(MAX)) + ': '+ dbo.ProperCase(UG.USER_GROUP_NAME) + ' (' + UG.USER_GROUP_CODE + ')', ' , ')
			from (
				select distinct vl.APPROVAL_LEVEL, user_group_name, UG.USER_GROUP_CODE
				FROM #ALL_LIMIT VL
				INNER JOIN USER_GROUP UG ON VL.USER_ROLE = UG.USER_GROUP_CODE
				LEFT OUTER JOIN (
					SELECT ROW_NUMBER() OVER(PARTITION BY USER_GROUP_CODE ORDER BY TRAN_ID DESC) RN, USER_GROUP_CODE
					FROM USER_RIGHTS_HIST
					WHERE [ACTION] = 1
				) RIGHTS ON VL.USER_ROLE = RIGHTS.USER_GROUP_CODE AND RIGHTS.RN = 1
			WHERE RIGHTS.RN IS NULL
			) ug
		);
		IF @INVALID_USER_GROUPS IS NOT NULL AND (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 0 OR (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 0))
		BEGIN
			SET @MSG = FORMATMESSAGE('Warning ! - Approval Users are not assigned with proper approval rights in the following roles - %s', @INVALID_USER_GROUPS);
			;THROW 50000, @msg, 1;
		END
	
		SELECT AL.*, UG.*
		INTO #VALID_LIMIT
		FROM #ALL_LIMIT AL
			INNER JOIN #USER_GROUPS UG ON UG.BR_CODE = @APPROVAL_BR_CODE AND UG.USER_GROUP_CODE = AL.USER_ROLE
			INNER JOIN BRANCH APPROVE_BR ON APPROVE_BR.BR_CODE = @APPROVAL_BR_CODE AND APPROVAL_BRANCH_CATEGORY_CODE = APPROVE_BR.BR_CAT_CODE
		WHERE LIMIT_ORDER = 1
			AND APPROVAL_LEVEL = @APPROVAL_LEVEL

		IF @IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 1
		    SET @MAX_APPROVAL_LEVEL = 1;
        ELSE
            SET @MAX_APPROVAL_LEVEL = (SELECT MAX(APPROVAL_LEVEL) FROM #ALL_LIMIT);

		/* === TEST === */
		--SELECT @APPROVAL_LEVEL APPROVAL_LEVEL, @MAX_APPROVAL_LEVEL MAX_APPROVAL_LEVEL
		--SELECT * FROM #USER_GROUPS
		--SELECT * FROM @TXN_LIST --XX
		--SELECT * FROM #ALL_LIMIT --XX
		--SELECT * FROM #VALID_LIMIT --XX
		----RETURN;
		--SELECT * FROM #VALID_LIMIT 
		/* === TEST END === */
		
		SET @INVALID_LIMIT_AC_GROUPS = (
			SELECT STRING_AGG(dbo.ProperCase(CAST(ac.AC_GROUP_CODE AS  VARCHAR(MAX))) + ' (' + CAST(AG.AC_GROUP_NAME AS  VARCHAR(MAX)) + ')', ' ,')
			FROM (
				SELECT AC.AC_GROUP_CODE
				FROM @TXN_LIST GL
				INNER JOIN AC_CHART AC ON GL.GL_CODE = AC.GL_CODE
				LEFT OUTER JOIN #VALID_LIMIT LIM ON AC.AC_GROUP_CODE = LIM.AC_GROUP_CODE
			WHERE LIM.AC_GROUP_CODE IS NULL
			) AC
			INNER JOIN AC_GROUP AG ON AG.AC_GROUP_CODE = AC.AC_GROUP_CODE
		);
		--xx:review
		--select @IS_CREATE iscre
		IF @IS_CREATE = 0 AND @INVALID_LIMIT_AC_GROUPS IS NOT NULL AND (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 0 OR (@IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 0))
		BEGIN
			SET @MSG = FORMATMESSAGE('Warning ! - Insufficient approval limit rights in A/c groups - %s', @INVALID_LIMIT_AC_GROUPS);
			;THROW 50000, @msg, 1;
		END

		IF @IS_ADMIN_USER_ALLOWED_FULL_RIGHTS = 1 AND @IS_USER_ADMIN = 1
            SET @HAS_APPROVAL_RIGHTS = 1;
        ELSE
            SET @HAS_APPROVAL_RIGHTS = CASE WHEN @IS_CREATE = 1 AND @INVALID_LIMIT_AC_GROUPS IS NULL THEN 1 WHEN @IS_CREATE = 1 AND @INVALID_LIMIT_AC_GROUPS IS NOT NULL THEN 0 END ; --WHEN @IS_CREATE = 0 AND @INVALID_LIMIT_AC_GROUPS IS NULL THEN 0 END;


	DROP TABLE IF EXISTS #USER_GROUPS
	DROP TABLE IF EXISTS #ALL_SCREEN_RIGHTS
	DROP TABLE IF EXISTS #VALID_RIGHTS
	DROP TABLE IF EXISTS #GL_LIST
	DROP TABLE IF EXISTS #AC_GROUP
	DROP TABLE IF EXISTS #AC_GROUP_RIGHTS
	DROP TABLE IF EXISTS #FLOW_AC_DETL
	DROP TABLE IF EXISTS #VALID_LIMIT

	END
END
